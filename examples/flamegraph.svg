<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="486" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="469.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="469.00"> </text><svg id="frames" x="10" width="1180" total_samples="884"><g><title>__GI___clone3 (1 samples, 0.11%)</title><rect x="0.0000%" y="405" width="0.1131%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="415.50"></text></g><g><title>start_thread (1 samples, 0.11%)</title><rect x="0.0000%" y="389" width="0.1131%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="399.50"></text></g><g><title>sched_yield (1 samples, 0.11%)</title><rect x="0.0000%" y="373" width="0.1131%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="383.50"></text></g><g><title>__GI___libc_free (1 samples, 0.11%)</title><rect x="0.3394%" y="213" width="0.1131%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="1"/><text x="0.5894%" y="223.50"></text></g><g><title>&lt;haru_cmaes::fitness::SquareAndSum as haru_cmaes::fitness::FitnessEvaluator&gt;::evaluate (5 samples, 0.57%)</title><rect x="0.1131%" y="261" width="0.5656%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="5"/><text x="0.3631%" y="271.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map_axis (5 samples, 0.57%)</title><rect x="0.1131%" y="245" width="0.5656%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="5"/><text x="0.3631%" y="255.50"></text></g><g><title>ndarray::iterators::to_vec_mapped (5 samples, 0.57%)</title><rect x="0.1131%" y="229" width="0.5656%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="5"/><text x="0.3631%" y="239.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (2 samples, 0.23%)</title><rect x="0.4525%" y="213" width="0.2262%" height="15" fill="rgb(228,23,34)" fg:x="4" fg:w="2"/><text x="0.7025%" y="223.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.11%)</title><rect x="0.5656%" y="197" width="0.1131%" height="15" fill="rgb(218,30,26)" fg:x="5" fg:w="1"/><text x="0.8156%" y="207.50"></text></g><g><title>sgemm_kernel_HASWELL (6 samples, 0.68%)</title><rect x="1.0181%" y="133" width="0.6787%" height="15" fill="rgb(220,122,19)" fg:x="9" fg:w="6"/><text x="1.2681%" y="143.50"></text></g><g><title>sgemm_nn (7 samples, 0.79%)</title><rect x="1.0181%" y="149" width="0.7919%" height="15" fill="rgb(250,228,42)" fg:x="9" fg:w="7"/><text x="1.2681%" y="159.50"></text></g><g><title>sgemm_oncopy_HASWELL (1 samples, 0.11%)</title><rect x="1.6968%" y="133" width="0.1131%" height="15" fill="rgb(240,193,28)" fg:x="15" fg:w="1"/><text x="1.9468%" y="143.50"></text></g><g><title>sgemm_itcopy_HASWELL (3 samples, 0.34%)</title><rect x="1.8100%" y="133" width="0.3394%" height="15" fill="rgb(216,20,37)" fg:x="16" fg:w="3"/><text x="2.0600%" y="143.50"></text></g><g><title>sgemm_kernel_HASWELL (6 samples, 0.68%)</title><rect x="2.1493%" y="133" width="0.6787%" height="15" fill="rgb(206,188,39)" fg:x="19" fg:w="6"/><text x="2.3993%" y="143.50"></text></g><g><title> 2]&gt;&gt; as ndarray::linalg::impl_linalg::Dot&lt;ndarray::ArrayBase&lt;S2,ndarray::dimension::dim::Dim&lt;[usize (20 samples, 2.26%)</title><rect x="0.6787%" y="213" width="2.2624%" height="15" fill="rgb(217,207,13)" fg:x="6" fg:w="20"/><text x="0.9287%" y="223.50"> ..</text></g><g><title> 2]&gt;&gt;&gt;&gt;::dot (20 samples, 2.26%)</title><rect x="0.6787%" y="197" width="2.2624%" height="15" fill="rgb(231,73,38)" fg:x="6" fg:w="20"/><text x="0.9287%" y="207.50"> ..</text></g><g><title>ndarray::linalg::impl_linalg::mat_mul_impl (19 samples, 2.15%)</title><rect x="0.7919%" y="181" width="2.1493%" height="15" fill="rgb(225,20,46)" fg:x="7" fg:w="19"/><text x="1.0419%" y="191.50">n..</text></g><g><title>cblas_sgemm (17 samples, 1.92%)</title><rect x="1.0181%" y="165" width="1.9231%" height="15" fill="rgb(210,31,41)" fg:x="9" fg:w="17"/><text x="1.2681%" y="175.50">c..</text></g><g><title>sgemm_nt (10 samples, 1.13%)</title><rect x="1.8100%" y="149" width="1.1312%" height="15" fill="rgb(221,200,47)" fg:x="16" fg:w="10"/><text x="2.0600%" y="159.50"></text></g><g><title>sgemm_otcopy_HASWELL (1 samples, 0.11%)</title><rect x="2.8281%" y="133" width="0.1131%" height="15" fill="rgb(226,26,5)" fg:x="25" fg:w="1"/><text x="3.0781%" y="143.50"></text></g><g><title>lax::eig::reconstruct_eigenvectors (2 samples, 0.23%)</title><rect x="2.9412%" y="149" width="0.2262%" height="15" fill="rgb(249,33,26)" fg:x="26" fg:w="2"/><text x="3.1912%" y="159.50"></text></g><g><title>sgebal_ (1 samples, 0.11%)</title><rect x="3.1674%" y="133" width="0.1131%" height="15" fill="rgb(235,183,28)" fg:x="28" fg:w="1"/><text x="3.4174%" y="143.50"></text></g><g><title>sgemv_n_HASWELL (8 samples, 0.90%)</title><rect x="3.8462%" y="69" width="0.9050%" height="15" fill="rgb(221,5,38)" fg:x="34" fg:w="8"/><text x="4.0962%" y="79.50"></text></g><g><title>sgemv_t_HASWELL (13 samples, 1.47%)</title><rect x="4.7511%" y="69" width="1.4706%" height="15" fill="rgb(247,18,42)" fg:x="42" fg:w="13"/><text x="5.0011%" y="79.50"></text></g><g><title>sgemv_ (25 samples, 2.83%)</title><rect x="3.6199%" y="85" width="2.8281%" height="15" fill="rgb(241,131,45)" fg:x="32" fg:w="25"/><text x="3.8699%" y="95.50">sg..</text></g><g><title>sscal_k_HASWELL (2 samples, 0.23%)</title><rect x="6.2217%" y="69" width="0.2262%" height="15" fill="rgb(249,31,29)" fg:x="55" fg:w="2"/><text x="6.4717%" y="79.50"></text></g><g><title>slarf_ (72 samples, 8.14%)</title><rect x="3.2805%" y="101" width="8.1448%" height="15" fill="rgb(225,111,53)" fg:x="29" fg:w="72"/><text x="3.5305%" y="111.50">slarf_</text></g><g><title>sger_ (44 samples, 4.98%)</title><rect x="6.4480%" y="85" width="4.9774%" height="15" fill="rgb(238,160,17)" fg:x="57" fg:w="44"/><text x="6.6980%" y="95.50">sger_</text></g><g><title>sger_k_HASWELL (42 samples, 4.75%)</title><rect x="6.6742%" y="69" width="4.7511%" height="15" fill="rgb(214,148,48)" fg:x="59" fg:w="42"/><text x="6.9242%" y="79.50">sger_k..</text></g><g><title>saxpy_k_HASWELL (37 samples, 4.19%)</title><rect x="7.2398%" y="53" width="4.1855%" height="15" fill="rgb(232,36,49)" fg:x="64" fg:w="37"/><text x="7.4898%" y="63.50">saxpy..</text></g><g><title>slaic1_ (1 samples, 0.11%)</title><rect x="11.7647%" y="69" width="0.1131%" height="15" fill="rgb(209,103,24)" fg:x="104" fg:w="1"/><text x="12.0147%" y="79.50"></text></g><g><title>slapy2_ (4 samples, 0.45%)</title><rect x="11.5385%" y="85" width="0.4525%" height="15" fill="rgb(229,88,8)" fg:x="102" fg:w="4"/><text x="11.7885%" y="95.50"></text></g><g><title>slamch_ (1 samples, 0.11%)</title><rect x="11.8778%" y="69" width="0.1131%" height="15" fill="rgb(213,181,19)" fg:x="105" fg:w="1"/><text x="12.1278%" y="79.50"></text></g><g><title>sgehrd_ (79 samples, 8.94%)</title><rect x="3.2805%" y="133" width="8.9367%" height="15" fill="rgb(254,191,54)" fg:x="29" fg:w="79"/><text x="3.5305%" y="143.50">sgehrd_</text></g><g><title>sgehd2_ (79 samples, 8.94%)</title><rect x="3.2805%" y="117" width="8.9367%" height="15" fill="rgb(241,83,37)" fg:x="29" fg:w="79"/><text x="3.5305%" y="127.50">sgehd2_</text></g><g><title>slarfg_ (7 samples, 0.79%)</title><rect x="11.4253%" y="101" width="0.7919%" height="15" fill="rgb(233,36,39)" fg:x="101" fg:w="7"/><text x="11.6753%" y="111.50"></text></g><g><title>sscal_ (2 samples, 0.23%)</title><rect x="11.9910%" y="85" width="0.2262%" height="15" fill="rgb(226,3,54)" fg:x="106" fg:w="2"/><text x="12.2410%" y="95.50"></text></g><g><title>sscal_k_HASWELL (1 samples, 0.11%)</title><rect x="12.1041%" y="69" width="0.1131%" height="15" fill="rgb(245,192,40)" fg:x="107" fg:w="1"/><text x="12.3541%" y="79.50"></text></g><g><title>ilaenv_ (1 samples, 0.11%)</title><rect x="12.2172%" y="117" width="0.1131%" height="15" fill="rgb(238,167,29)" fg:x="108" fg:w="1"/><text x="12.4672%" y="127.50"></text></g><g><title>slamch_ (4 samples, 0.45%)</title><rect x="50.5656%" y="85" width="0.4525%" height="15" fill="rgb(232,182,51)" fg:x="447" fg:w="4"/><text x="50.8156%" y="95.50"></text></g><g><title>lsame_ (3 samples, 0.34%)</title><rect x="50.6787%" y="69" width="0.3394%" height="15" fill="rgb(231,60,39)" fg:x="448" fg:w="3"/><text x="50.9287%" y="79.50"></text></g><g><title>slaic1_ (2 samples, 0.23%)</title><rect x="52.1493%" y="69" width="0.2262%" height="15" fill="rgb(208,69,12)" fg:x="461" fg:w="2"/><text x="52.3993%" y="79.50"></text></g><g><title>slaisnan_ (2 samples, 0.23%)</title><rect x="52.3756%" y="69" width="0.2262%" height="15" fill="rgb(235,93,37)" fg:x="463" fg:w="2"/><text x="52.6256%" y="79.50"></text></g><g><title>slapy2_ (39 samples, 4.41%)</title><rect x="51.0181%" y="85" width="4.4118%" height="15" fill="rgb(213,116,39)" fg:x="451" fg:w="39"/><text x="51.2681%" y="95.50">slapy..</text></g><g><title>slamch_ (25 samples, 2.83%)</title><rect x="52.6018%" y="69" width="2.8281%" height="15" fill="rgb(222,207,29)" fg:x="465" fg:w="25"/><text x="52.8518%" y="79.50">sl..</text></g><g><title>lsame_ (6 samples, 0.68%)</title><rect x="54.7511%" y="53" width="0.6787%" height="15" fill="rgb(206,96,30)" fg:x="484" fg:w="6"/><text x="55.0011%" y="63.50"></text></g><g><title>snrm2_ (1 samples, 0.11%)</title><rect x="55.4299%" y="85" width="0.1131%" height="15" fill="rgb(218,138,4)" fg:x="490" fg:w="1"/><text x="55.6799%" y="95.50"></text></g><g><title>slahqr_ (394 samples, 44.57%)</title><rect x="12.3303%" y="117" width="44.5701%" height="15" fill="rgb(250,191,14)" fg:x="109" fg:w="394"/><text x="12.5803%" y="127.50">slahqr_</text></g><g><title>slarfg_ (82 samples, 9.28%)</title><rect x="47.6244%" y="101" width="9.2760%" height="15" fill="rgb(239,60,40)" fg:x="421" fg:w="82"/><text x="47.8744%" y="111.50">slarfg_</text></g><g><title>sscal_ (12 samples, 1.36%)</title><rect x="55.5430%" y="85" width="1.3575%" height="15" fill="rgb(206,27,48)" fg:x="491" fg:w="12"/><text x="55.7930%" y="95.50"></text></g><g><title>sscal_k_HASWELL (5 samples, 0.57%)</title><rect x="56.3348%" y="69" width="0.5656%" height="15" fill="rgb(225,35,8)" fg:x="498" fg:w="5"/><text x="56.5848%" y="79.50"></text></g><g><title>shseqr_ (397 samples, 44.91%)</title><rect x="12.2172%" y="133" width="44.9095%" height="15" fill="rgb(250,213,24)" fg:x="108" fg:w="397"/><text x="12.4672%" y="143.50">shseqr_</text></g><g><title>slaqr0_ (2 samples, 0.23%)</title><rect x="56.9005%" y="117" width="0.2262%" height="15" fill="rgb(247,123,22)" fg:x="503" fg:w="2"/><text x="57.1505%" y="127.50"></text></g><g><title>slaqr3_ (1 samples, 0.11%)</title><rect x="57.0136%" y="101" width="0.1131%" height="15" fill="rgb(231,138,38)" fg:x="504" fg:w="1"/><text x="57.2636%" y="111.50"></text></g><g><title>sgehrd_ (1 samples, 0.11%)</title><rect x="57.0136%" y="85" width="0.1131%" height="15" fill="rgb(231,145,46)" fg:x="504" fg:w="1"/><text x="57.2636%" y="95.50"></text></g><g><title>sroundup_lwork_ (1 samples, 0.11%)</title><rect x="57.0136%" y="69" width="0.1131%" height="15" fill="rgb(251,118,11)" fg:x="504" fg:w="1"/><text x="57.2636%" y="79.50"></text></g><g><title>slacpy_ (2 samples, 0.23%)</title><rect x="57.1267%" y="133" width="0.2262%" height="15" fill="rgb(217,147,25)" fg:x="505" fg:w="2"/><text x="57.3767%" y="143.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.23%)</title><rect x="57.1267%" y="117" width="0.2262%" height="15" fill="rgb(247,81,37)" fg:x="505" fg:w="2"/><text x="57.3767%" y="127.50"></text></g><g><title>slaic1_ (1 samples, 0.11%)</title><rect x="58.2579%" y="117" width="0.1131%" height="15" fill="rgb(209,12,38)" fg:x="515" fg:w="1"/><text x="58.5079%" y="127.50"></text></g><g><title>slange_ (11 samples, 1.24%)</title><rect x="57.3529%" y="133" width="1.2443%" height="15" fill="rgb(227,1,9)" fg:x="507" fg:w="11"/><text x="57.6029%" y="143.50"></text></g><g><title>slaisnan_ (2 samples, 0.23%)</title><rect x="58.3710%" y="117" width="0.2262%" height="15" fill="rgb(248,47,43)" fg:x="516" fg:w="2"/><text x="58.6210%" y="127.50"></text></g><g><title>ilaslc_ (1 samples, 0.11%)</title><rect x="58.9367%" y="69" width="0.1131%" height="15" fill="rgb(221,10,30)" fg:x="521" fg:w="1"/><text x="59.1867%" y="79.50"></text></g><g><title>sgemv_t_HASWELL (7 samples, 0.79%)</title><rect x="59.0498%" y="53" width="0.7919%" height="15" fill="rgb(210,229,1)" fg:x="522" fg:w="7"/><text x="59.2998%" y="63.50"></text></g><g><title>sgemv_ (9 samples, 1.02%)</title><rect x="59.0498%" y="69" width="1.0181%" height="15" fill="rgb(222,148,37)" fg:x="522" fg:w="9"/><text x="59.2998%" y="79.50"></text></g><g><title>sscal_k_HASWELL (2 samples, 0.23%)</title><rect x="59.8416%" y="53" width="0.2262%" height="15" fill="rgb(234,67,33)" fg:x="529" fg:w="2"/><text x="60.0916%" y="63.50"></text></g><g><title>sorghr_ (29 samples, 3.28%)</title><rect x="58.5973%" y="133" width="3.2805%" height="15" fill="rgb(247,98,35)" fg:x="518" fg:w="29"/><text x="58.8473%" y="143.50">sor..</text></g><g><title>sorgqr_ (28 samples, 3.17%)</title><rect x="58.7104%" y="117" width="3.1674%" height="15" fill="rgb(247,138,52)" fg:x="519" fg:w="28"/><text x="58.9604%" y="127.50">sor..</text></g><g><title>sorg2r_ (28 samples, 3.17%)</title><rect x="58.7104%" y="101" width="3.1674%" height="15" fill="rgb(213,79,30)" fg:x="519" fg:w="28"/><text x="58.9604%" y="111.50">sor..</text></g><g><title>slarf_ (27 samples, 3.05%)</title><rect x="58.8235%" y="85" width="3.0543%" height="15" fill="rgb(246,177,23)" fg:x="520" fg:w="27"/><text x="59.0735%" y="95.50">sla..</text></g><g><title>sger_ (16 samples, 1.81%)</title><rect x="60.0679%" y="69" width="1.8100%" height="15" fill="rgb(230,62,27)" fg:x="531" fg:w="16"/><text x="60.3179%" y="79.50">s..</text></g><g><title>sger_k_HASWELL (16 samples, 1.81%)</title><rect x="60.0679%" y="53" width="1.8100%" height="15" fill="rgb(216,154,8)" fg:x="531" fg:w="16"/><text x="60.3179%" y="63.50">s..</text></g><g><title>saxpy_k_HASWELL (14 samples, 1.58%)</title><rect x="60.2941%" y="37" width="1.5837%" height="15" fill="rgb(244,35,45)" fg:x="533" fg:w="14"/><text x="60.5441%" y="47.50"></text></g><g><title>sscal_ (1 samples, 0.11%)</title><rect x="61.8778%" y="133" width="0.1131%" height="15" fill="rgb(251,115,12)" fg:x="547" fg:w="1"/><text x="62.1278%" y="143.50"></text></g><g><title>__memset_avx2_unaligned_erms (1 samples, 0.11%)</title><rect x="63.9140%" y="117" width="0.1131%" height="15" fill="rgb(240,54,50)" fg:x="565" fg:w="1"/><text x="64.1640%" y="127.50"></text></g><g><title>isamax_ (3 samples, 0.34%)</title><rect x="64.0271%" y="117" width="0.3394%" height="15" fill="rgb(233,84,52)" fg:x="566" fg:w="3"/><text x="64.2771%" y="127.50"></text></g><g><title>saxpy_ (12 samples, 1.36%)</title><rect x="64.3665%" y="117" width="1.3575%" height="15" fill="rgb(207,117,47)" fg:x="569" fg:w="12"/><text x="64.6165%" y="127.50"></text></g><g><title>saxpy_k_HASWELL (9 samples, 1.02%)</title><rect x="64.7059%" y="101" width="1.0181%" height="15" fill="rgb(249,43,39)" fg:x="572" fg:w="9"/><text x="64.9559%" y="111.50"></text></g><g><title>blas_memory_alloc (1 samples, 0.11%)</title><rect x="65.7240%" y="101" width="0.1131%" height="15" fill="rgb(209,38,44)" fg:x="581" fg:w="1"/><text x="65.9740%" y="111.50"></text></g><g><title>___pthread_mutex_lock (1 samples, 0.11%)</title><rect x="65.7240%" y="85" width="0.1131%" height="15" fill="rgb(236,212,23)" fg:x="581" fg:w="1"/><text x="65.9740%" y="95.50"></text></g><g><title>lll_mutex_lock_optimized (1 samples, 0.11%)</title><rect x="65.7240%" y="69" width="0.1131%" height="15" fill="rgb(242,79,21)" fg:x="581" fg:w="1"/><text x="65.9740%" y="79.50"></text></g><g><title>sgemm_itcopy_HASWELL (1 samples, 0.11%)</title><rect x="65.8371%" y="85" width="0.1131%" height="15" fill="rgb(211,96,35)" fg:x="582" fg:w="1"/><text x="66.0871%" y="95.50"></text></g><g><title>sgemm_ (11 samples, 1.24%)</title><rect x="65.7240%" y="117" width="1.2443%" height="15" fill="rgb(253,215,40)" fg:x="581" fg:w="11"/><text x="65.9740%" y="127.50"></text></g><g><title>sgemm_nn (10 samples, 1.13%)</title><rect x="65.8371%" y="101" width="1.1312%" height="15" fill="rgb(211,81,21)" fg:x="582" fg:w="10"/><text x="66.0871%" y="111.50"></text></g><g><title>sgemm_kernel_HASWELL (9 samples, 1.02%)</title><rect x="65.9502%" y="85" width="1.0181%" height="15" fill="rgb(208,190,38)" fg:x="583" fg:w="9"/><text x="66.2002%" y="95.50"></text></g><g><title>slaln2_ (25 samples, 2.83%)</title><rect x="66.9683%" y="117" width="2.8281%" height="15" fill="rgb(235,213,38)" fg:x="592" fg:w="25"/><text x="67.2183%" y="127.50">sl..</text></g><g><title>slamch_ (7 samples, 0.79%)</title><rect x="69.0045%" y="101" width="0.7919%" height="15" fill="rgb(237,122,38)" fg:x="610" fg:w="7"/><text x="69.2545%" y="111.50"></text></g><g><title>lsame_ (3 samples, 0.34%)</title><rect x="69.4570%" y="85" width="0.3394%" height="15" fill="rgb(244,218,35)" fg:x="614" fg:w="3"/><text x="69.7070%" y="95.50"></text></g><g><title>slaset_ (5 samples, 0.57%)</title><rect x="69.7964%" y="117" width="0.5656%" height="15" fill="rgb(240,68,47)" fg:x="617" fg:w="5"/><text x="70.0464%" y="127.50"></text></g><g><title>&lt;lax::eig::EigWork&lt;f32&gt; as lax::eig::EigWorkImpl&gt;::eval (597 samples, 67.53%)</title><rect x="2.9412%" y="181" width="67.5339%" height="15" fill="rgb(210,16,53)" fg:x="26" fg:w="597"/><text x="3.1912%" y="191.50">&lt;lax::eig::EigWork&lt;f32&gt; as lax::eig::EigWorkImpl&gt;::eval</text></g><g><title>&lt;lax::eig::EigWork&lt;f32&gt; as lax::eig::EigWorkImpl&gt;::calc (597 samples, 67.53%)</title><rect x="2.9412%" y="165" width="67.5339%" height="15" fill="rgb(235,124,12)" fg:x="26" fg:w="597"/><text x="3.1912%" y="175.50">&lt;lax::eig::EigWork&lt;f32&gt; as lax::eig::EigWorkImpl&gt;::calc</text></g><g><title>sgeev_ (595 samples, 67.31%)</title><rect x="3.1674%" y="149" width="67.3077%" height="15" fill="rgb(224,169,11)" fg:x="28" fg:w="595"/><text x="3.4174%" y="159.50">sgeev_</text></g><g><title>strevc3_ (75 samples, 8.48%)</title><rect x="61.9910%" y="133" width="8.4842%" height="15" fill="rgb(250,166,2)" fg:x="548" fg:w="75"/><text x="62.2410%" y="143.50">strevc3_</text></g><g><title>sscal_ (1 samples, 0.11%)</title><rect x="70.3620%" y="117" width="0.1131%" height="15" fill="rgb(242,216,29)" fg:x="622" fg:w="1"/><text x="70.6120%" y="127.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.11%)</title><rect x="70.4751%" y="165" width="0.1131%" height="15" fill="rgb(230,116,27)" fg:x="623" fg:w="1"/><text x="70.7251%" y="175.50"></text></g><g><title>_int_malloc (1 samples, 0.11%)</title><rect x="70.4751%" y="149" width="0.1131%" height="15" fill="rgb(228,99,48)" fg:x="623" fg:w="1"/><text x="70.7251%" y="159.50"></text></g><g><title>sysmalloc (1 samples, 0.11%)</title><rect x="70.4751%" y="133" width="0.1131%" height="15" fill="rgb(253,11,6)" fg:x="623" fg:w="1"/><text x="70.7251%" y="143.50"></text></g><g><title>ilaenv_ (1 samples, 0.11%)</title><rect x="70.5882%" y="149" width="0.1131%" height="15" fill="rgb(247,143,39)" fg:x="624" fg:w="1"/><text x="70.8382%" y="159.50"></text></g><g><title>shseqr_ (1 samples, 0.11%)</title><rect x="70.7014%" y="149" width="0.1131%" height="15" fill="rgb(236,97,10)" fg:x="625" fg:w="1"/><text x="70.9514%" y="159.50"></text></g><g><title>slaqr0_ (1 samples, 0.11%)</title><rect x="70.7014%" y="133" width="0.1131%" height="15" fill="rgb(233,208,19)" fg:x="625" fg:w="1"/><text x="70.9514%" y="143.50"></text></g><g><title>&lt;ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize (621 samples, 70.25%)</title><rect x="0.6787%" y="229" width="70.2489%" height="15" fill="rgb(216,164,2)" fg:x="6" fg:w="621"/><text x="0.9287%" y="239.50">&lt;ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize</text></g><g><title> 2]&gt;&gt; as ndarray_linalg::eig::Eig&gt;::eig (601 samples, 67.99%)</title><rect x="2.9412%" y="213" width="67.9864%" height="15" fill="rgb(220,129,5)" fg:x="26" fg:w="601"/><text x="3.1912%" y="223.50"> 2]&gt;&gt; as ndarray_linalg::eig::Eig&gt;::eig</text></g><g><title>&lt;f32 as lax::Lapack&gt;::eig (601 samples, 67.99%)</title><rect x="2.9412%" y="197" width="67.9864%" height="15" fill="rgb(242,17,10)" fg:x="26" fg:w="601"/><text x="3.1912%" y="207.50">&lt;f32 as lax::Lapack&gt;::eig</text></g><g><title>&lt;lax::eig::EigWork&lt;f32&gt; as lax::eig::EigWorkImpl&gt;::new (4 samples, 0.45%)</title><rect x="70.4751%" y="181" width="0.4525%" height="15" fill="rgb(242,107,0)" fg:x="623" fg:w="4"/><text x="70.7251%" y="191.50"></text></g><g><title>sgeev_ (3 samples, 0.34%)</title><rect x="70.5882%" y="165" width="0.3394%" height="15" fill="rgb(251,28,31)" fg:x="624" fg:w="3"/><text x="70.8382%" y="175.50"></text></g><g><title>strevc3_ (1 samples, 0.11%)</title><rect x="70.8145%" y="149" width="0.1131%" height="15" fill="rgb(233,223,10)" fg:x="626" fg:w="1"/><text x="71.0645%" y="159.50"></text></g><g><title>ilaenv_ (1 samples, 0.11%)</title><rect x="70.8145%" y="133" width="0.1131%" height="15" fill="rgb(215,21,27)" fg:x="626" fg:w="1"/><text x="71.0645%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (9 samples, 1.02%)</title><rect x="70.9276%" y="213" width="1.0181%" height="15" fill="rgb(232,23,21)" fg:x="627" fg:w="9"/><text x="71.1776%" y="223.50"></text></g><g><title>haru_cmaes::utils::into_f_major (10 samples, 1.13%)</title><rect x="70.9276%" y="229" width="1.1312%" height="15" fill="rgb(244,5,23)" fg:x="627" fg:w="10"/><text x="71.1776%" y="239.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::to_owned (1 samples, 0.11%)</title><rect x="71.9457%" y="213" width="0.1131%" height="15" fill="rgb(226,81,46)" fg:x="636" fg:w="1"/><text x="72.1957%" y="223.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.11%)</title><rect x="71.9457%" y="197" width="0.1131%" height="15" fill="rgb(247,70,30)" fg:x="636" fg:w="1"/><text x="72.1957%" y="207.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize (1 samples, 0.11%)</title><rect x="72.0588%" y="229" width="0.1131%" height="15" fill="rgb(212,68,19)" fg:x="637" fg:w="1"/><text x="72.3088%" y="239.50"></text></g><g><title> 2]&gt;&gt;&gt;::from_diag (1 samples, 0.11%)</title><rect x="72.0588%" y="213" width="0.1131%" height="15" fill="rgb(240,187,13)" fg:x="637" fg:w="1"/><text x="72.3088%" y="223.50"></text></g><g><title>__memset_avx2_unaligned_erms (1 samples, 0.11%)</title><rect x="72.0588%" y="197" width="0.1131%" height="15" fill="rgb(223,113,26)" fg:x="637" fg:w="1"/><text x="72.3088%" y="207.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::and (1 samples, 0.11%)</title><rect x="72.1719%" y="197" width="0.1131%" height="15" fill="rgb(206,192,2)" fg:x="638" fg:w="1"/><text x="72.4219%" y="207.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Add&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for &amp;ndarray::ArrayBase&lt;S,D&gt;&gt;::add (2 samples, 0.23%)</title><rect x="72.1719%" y="229" width="0.2262%" height="15" fill="rgb(241,108,4)" fg:x="638" fg:w="2"/><text x="72.4219%" y="239.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::map_collect_owned (2 samples, 0.23%)</title><rect x="72.1719%" y="213" width="0.2262%" height="15" fill="rgb(247,173,49)" fg:x="638" fg:w="2"/><text x="72.4219%" y="223.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2,PLast),D&gt;::collect_with_partial (1 samples, 0.11%)</title><rect x="72.2851%" y="197" width="0.1131%" height="15" fill="rgb(224,114,35)" fg:x="639" fg:w="1"/><text x="72.5351%" y="207.50"></text></g><g><title>&lt;haru_cmaes::state::CmaesState as haru_cmaes::state::CmaesStateLogic&gt;::eigen_decomposition (637 samples, 72.06%)</title><rect x="0.6787%" y="245" width="72.0588%" height="15" fill="rgb(245,159,27)" fg:x="6" fg:w="637"/><text x="0.9287%" y="255.50">&lt;haru_cmaes::state::CmaesState as haru_cmaes::state::CmaesStateLogic&gt;::eigen_decomposition</text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Div&lt;B&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::div (3 samples, 0.34%)</title><rect x="72.3982%" y="229" width="0.3394%" height="15" fill="rgb(245,172,44)" fg:x="640" fg:w="3"/><text x="72.6482%" y="239.50"></text></g><g><title>sgemm_beta_HASWELL (1 samples, 0.11%)</title><rect x="72.7376%" y="149" width="0.1131%" height="15" fill="rgb(236,23,11)" fg:x="643" fg:w="1"/><text x="72.9876%" y="159.50"></text></g><g><title>__memset_avx2_unaligned_erms (1 samples, 0.11%)</title><rect x="72.7376%" y="133" width="0.1131%" height="15" fill="rgb(205,117,38)" fg:x="643" fg:w="1"/><text x="72.9876%" y="143.50"></text></g><g><title>sgemm_itcopy_HASWELL (2 samples, 0.23%)</title><rect x="72.8507%" y="149" width="0.2262%" height="15" fill="rgb(237,72,25)" fg:x="644" fg:w="2"/><text x="73.1007%" y="159.50"></text></g><g><title>sgemm_kernel_HASWELL (9 samples, 1.02%)</title><rect x="73.0769%" y="149" width="1.0181%" height="15" fill="rgb(244,70,9)" fg:x="646" fg:w="9"/><text x="73.3269%" y="159.50"></text></g><g><title>&lt;ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize (13 samples, 1.47%)</title><rect x="72.7376%" y="245" width="1.4706%" height="15" fill="rgb(217,125,39)" fg:x="643" fg:w="13"/><text x="72.9876%" y="255.50"></text></g><g><title> 2]&gt;&gt; as ndarray::linalg::impl_linalg::Dot&lt;ndarray::ArrayBase&lt;S2,ndarray::dimension::dim::Dim&lt;[usize (13 samples, 1.47%)</title><rect x="72.7376%" y="229" width="1.4706%" height="15" fill="rgb(235,36,10)" fg:x="643" fg:w="13"/><text x="72.9876%" y="239.50"></text></g><g><title> 2]&gt;&gt;&gt;&gt;::dot (13 samples, 1.47%)</title><rect x="72.7376%" y="213" width="1.4706%" height="15" fill="rgb(251,123,47)" fg:x="643" fg:w="13"/><text x="72.9876%" y="223.50"></text></g><g><title>ndarray::linalg::impl_linalg::mat_mul_impl (13 samples, 1.47%)</title><rect x="72.7376%" y="197" width="1.4706%" height="15" fill="rgb(221,13,13)" fg:x="643" fg:w="13"/><text x="72.9876%" y="207.50"></text></g><g><title>cblas_sgemm (13 samples, 1.47%)</title><rect x="72.7376%" y="181" width="1.4706%" height="15" fill="rgb(238,131,9)" fg:x="643" fg:w="13"/><text x="72.9876%" y="191.50"></text></g><g><title>sgemm_nn (13 samples, 1.47%)</title><rect x="72.7376%" y="165" width="1.4706%" height="15" fill="rgb(211,50,8)" fg:x="643" fg:w="13"/><text x="72.9876%" y="175.50"></text></g><g><title>sgemm_oncopy_HASWELL (1 samples, 0.11%)</title><rect x="74.0950%" y="149" width="0.1131%" height="15" fill="rgb(245,182,24)" fg:x="655" fg:w="1"/><text x="74.3450%" y="159.50"></text></g><g><title>__GI___libc_free (1 samples, 0.11%)</title><rect x="74.2081%" y="245" width="0.1131%" height="15" fill="rgb(242,14,37)" fg:x="656" fg:w="1"/><text x="74.4581%" y="255.50"></text></g><g><title>_int_free (1 samples, 0.11%)</title><rect x="74.2081%" y="229" width="0.1131%" height="15" fill="rgb(246,228,12)" fg:x="656" fg:w="1"/><text x="74.4581%" y="239.50"></text></g><g><title>_int_free_merge_chunk (1 samples, 0.11%)</title><rect x="74.2081%" y="213" width="0.1131%" height="15" fill="rgb(213,55,15)" fg:x="656" fg:w="1"/><text x="74.4581%" y="223.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::to_owned (2 samples, 0.23%)</title><rect x="74.3213%" y="245" width="0.2262%" height="15" fill="rgb(209,9,3)" fg:x="657" fg:w="2"/><text x="74.5713%" y="255.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.23%)</title><rect x="74.3213%" y="229" width="0.2262%" height="15" fill="rgb(230,59,30)" fg:x="657" fg:w="2"/><text x="74.5713%" y="239.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Add&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for &amp;ndarray::ArrayBase&lt;S,D&gt;&gt;::add (1 samples, 0.11%)</title><rect x="74.5475%" y="245" width="0.1131%" height="15" fill="rgb(209,121,21)" fg:x="659" fg:w="1"/><text x="74.7975%" y="255.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::map_collect_owned (1 samples, 0.11%)</title><rect x="74.5475%" y="229" width="0.1131%" height="15" fill="rgb(220,109,13)" fg:x="659" fg:w="1"/><text x="74.7975%" y="239.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2,PLast),D&gt;::collect_with_partial (1 samples, 0.11%)</title><rect x="74.5475%" y="213" width="0.1131%" height="15" fill="rgb(232,18,1)" fg:x="659" fg:w="1"/><text x="74.7975%" y="223.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Mul&lt;B&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::mul (1 samples, 0.11%)</title><rect x="74.6606%" y="245" width="0.1131%" height="15" fill="rgb(215,41,42)" fg:x="660" fg:w="1"/><text x="74.9106%" y="255.50"></text></g><g><title>&lt;haru_cmaes::strategy::Cmaes as haru_cmaes::strategy::CmaesOptimizer&gt;::ask (668 samples, 75.57%)</title><rect x="0.6787%" y="261" width="75.5656%" height="15" fill="rgb(224,123,36)" fg:x="6" fg:w="668"/><text x="0.9287%" y="271.50">&lt;haru_cmaes::strategy::Cmaes as haru_cmaes::strategy::CmaesOptimizer&gt;::ask</text></g><g><title>ndarray::iterators::to_vec_mapped (13 samples, 1.47%)</title><rect x="74.7738%" y="245" width="1.4706%" height="15" fill="rgb(240,125,3)" fg:x="661" fg:w="13"/><text x="75.0238%" y="255.50"></text></g><g><title> 1]&gt;&gt;&gt;&gt;::dot (1 samples, 0.11%)</title><rect x="76.4706%" y="213" width="0.1131%" height="15" fill="rgb(205,98,50)" fg:x="676" fg:w="1"/><text x="76.7206%" y="223.50"></text></g><g><title>ndarray::linalg::impl_linalg::general_mat_vec_mul_impl (1 samples, 0.11%)</title><rect x="76.4706%" y="197" width="0.1131%" height="15" fill="rgb(205,185,37)" fg:x="676" fg:w="1"/><text x="76.7206%" y="207.50"></text></g><g><title>cblas_sgemv (1 samples, 0.11%)</title><rect x="76.4706%" y="181" width="0.1131%" height="15" fill="rgb(238,207,15)" fg:x="676" fg:w="1"/><text x="76.7206%" y="191.50"></text></g><g><title>sgemv_t_HASWELL (1 samples, 0.11%)</title><rect x="76.4706%" y="165" width="0.1131%" height="15" fill="rgb(213,199,42)" fg:x="676" fg:w="1"/><text x="76.7206%" y="175.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.57%)</title><rect x="76.8100%" y="197" width="0.5656%" height="15" fill="rgb(235,201,11)" fg:x="679" fg:w="5"/><text x="77.0600%" y="207.50"></text></g><g><title>_int_malloc (1 samples, 0.11%)</title><rect x="77.2624%" y="181" width="0.1131%" height="15" fill="rgb(207,46,11)" fg:x="683" fg:w="1"/><text x="77.5124%" y="191.50"></text></g><g><title>___pthread_mutex_lock (2 samples, 0.23%)</title><rect x="77.3756%" y="149" width="0.2262%" height="15" fill="rgb(241,35,35)" fg:x="684" fg:w="2"/><text x="77.6256%" y="159.50"></text></g><g><title>lll_mutex_lock_optimized (2 samples, 0.23%)</title><rect x="77.3756%" y="133" width="0.2262%" height="15" fill="rgb(243,32,47)" fg:x="684" fg:w="2"/><text x="77.6256%" y="143.50"></text></g><g><title>blas_memory_alloc (3 samples, 0.34%)</title><rect x="77.3756%" y="165" width="0.3394%" height="15" fill="rgb(247,202,23)" fg:x="684" fg:w="3"/><text x="77.6256%" y="175.50"></text></g><g><title>___pthread_mutex_unlock (1 samples, 0.11%)</title><rect x="77.6018%" y="149" width="0.1131%" height="15" fill="rgb(219,102,11)" fg:x="686" fg:w="1"/><text x="77.8518%" y="159.50"></text></g><g><title>__GI___pthread_mutex_unlock_usercnt (1 samples, 0.11%)</title><rect x="77.6018%" y="133" width="0.1131%" height="15" fill="rgb(243,110,44)" fg:x="686" fg:w="1"/><text x="77.8518%" y="143.50"></text></g><g><title>lll_mutex_unlock_optimized (1 samples, 0.11%)</title><rect x="77.6018%" y="117" width="0.1131%" height="15" fill="rgb(222,74,54)" fg:x="686" fg:w="1"/><text x="77.8518%" y="127.50"></text></g><g><title>Unknown (1 samples, 0.11%)</title><rect x="78.2805%" y="133" width="0.1131%" height="15" fill="rgb(216,99,12)" fg:x="692" fg:w="1"/><text x="78.5305%" y="143.50"></text></g><g><title>sgemm_beta_HASWELL (6 samples, 0.68%)</title><rect x="78.2805%" y="149" width="0.6787%" height="15" fill="rgb(226,22,26)" fg:x="692" fg:w="6"/><text x="78.5305%" y="159.50"></text></g><g><title>__memset_avx2_unaligned_erms (5 samples, 0.57%)</title><rect x="78.3937%" y="133" width="0.5656%" height="15" fill="rgb(217,163,10)" fg:x="693" fg:w="5"/><text x="78.6437%" y="143.50"></text></g><g><title>sgemm_itcopy_HASWELL (1 samples, 0.11%)</title><rect x="78.9593%" y="149" width="0.1131%" height="15" fill="rgb(213,25,53)" fg:x="698" fg:w="1"/><text x="79.2093%" y="159.50"></text></g><g><title>sgemm_kernel_HASWELL (17 samples, 1.92%)</title><rect x="79.0724%" y="149" width="1.9231%" height="15" fill="rgb(252,105,26)" fg:x="699" fg:w="17"/><text x="79.3224%" y="159.50">s..</text></g><g><title>&lt;ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize (43 samples, 4.86%)</title><rect x="76.4706%" y="245" width="4.8643%" height="15" fill="rgb(220,39,43)" fg:x="676" fg:w="43"/><text x="76.7206%" y="255.50">&lt;ndarr..</text></g><g><title> 2]&gt;&gt; as ndarray::linalg::impl_linalg::Dot&lt;ndarray::ArrayBase&lt;S2,ndarray::dimension::dim::Dim&lt;[usize (43 samples, 4.86%)</title><rect x="76.4706%" y="229" width="4.8643%" height="15" fill="rgb(229,68,48)" fg:x="676" fg:w="43"/><text x="76.7206%" y="239.50"> 2]&gt;&gt; ..</text></g><g><title> 2]&gt;&gt;&gt;&gt;::dot (42 samples, 4.75%)</title><rect x="76.5837%" y="213" width="4.7511%" height="15" fill="rgb(252,8,32)" fg:x="677" fg:w="42"/><text x="76.8337%" y="223.50"> 2]&gt;&gt;&gt;..</text></g><g><title>ndarray::linalg::impl_linalg::mat_mul_impl (35 samples, 3.96%)</title><rect x="77.3756%" y="197" width="3.9593%" height="15" fill="rgb(223,20,43)" fg:x="684" fg:w="35"/><text x="77.6256%" y="207.50">ndar..</text></g><g><title>cblas_sgemm (35 samples, 3.96%)</title><rect x="77.3756%" y="181" width="3.9593%" height="15" fill="rgb(229,81,49)" fg:x="684" fg:w="35"/><text x="77.6256%" y="191.50">cbla..</text></g><g><title>sgemm_nn (32 samples, 3.62%)</title><rect x="77.7149%" y="165" width="3.6199%" height="15" fill="rgb(236,28,36)" fg:x="687" fg:w="32"/><text x="77.9649%" y="175.50">sgem..</text></g><g><title>sgemm_oncopy_HASWELL (3 samples, 0.34%)</title><rect x="80.9955%" y="149" width="0.3394%" height="15" fill="rgb(249,185,26)" fg:x="716" fg:w="3"/><text x="81.2455%" y="159.50"></text></g><g><title>__GI___libc_free (5 samples, 0.57%)</title><rect x="81.3348%" y="245" width="0.5656%" height="15" fill="rgb(249,174,33)" fg:x="719" fg:w="5"/><text x="81.5848%" y="255.50"></text></g><g><title>_int_free (5 samples, 0.57%)</title><rect x="81.3348%" y="229" width="0.5656%" height="15" fill="rgb(233,201,37)" fg:x="719" fg:w="5"/><text x="81.5848%" y="239.50"></text></g><g><title>__powisf2 (3 samples, 0.34%)</title><rect x="81.9005%" y="245" width="0.3394%" height="15" fill="rgb(221,78,26)" fg:x="724" fg:w="3"/><text x="82.1505%" y="255.50"></text></g><g><title>core::slice::sort::merge_sort (4 samples, 0.45%)</title><rect x="82.2398%" y="245" width="0.4525%" height="15" fill="rgb(250,127,30)" fg:x="727" fg:w="4"/><text x="82.4898%" y="255.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (2 samples, 0.23%)</title><rect x="82.4661%" y="229" width="0.2262%" height="15" fill="rgb(230,49,44)" fg:x="729" fg:w="2"/><text x="82.7161%" y="239.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.11%)</title><rect x="90.0452%" y="229" width="0.1131%" height="15" fill="rgb(229,67,23)" fg:x="796" fg:w="1"/><text x="90.2952%" y="239.50"></text></g><g><title>_int_malloc (1 samples, 0.11%)</title><rect x="90.0452%" y="213" width="0.1131%" height="15" fill="rgb(249,83,47)" fg:x="796" fg:w="1"/><text x="90.2952%" y="223.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (67 samples, 7.58%)</title><rect x="82.6923%" y="245" width="7.5792%" height="15" fill="rgb(215,43,3)" fg:x="731" fg:w="67"/><text x="82.9423%" y="255.50">ndarray::i..</text></g><g><title>__malloc_fork_unlock_child (1 samples, 0.11%)</title><rect x="90.1584%" y="229" width="0.1131%" height="15" fill="rgb(238,154,13)" fg:x="797" fg:w="1"/><text x="90.4084%" y="239.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::slice (2 samples, 0.23%)</title><rect x="90.2715%" y="245" width="0.2262%" height="15" fill="rgb(219,56,2)" fg:x="798" fg:w="2"/><text x="90.5215%" y="255.50"></text></g><g><title>ndarray::dimension::do_slice (1 samples, 0.11%)</title><rect x="90.3846%" y="229" width="0.1131%" height="15" fill="rgb(233,0,4)" fg:x="799" fg:w="1"/><text x="90.6346%" y="239.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::to_owned (1 samples, 0.11%)</title><rect x="90.4977%" y="245" width="0.1131%" height="15" fill="rgb(235,30,7)" fg:x="800" fg:w="1"/><text x="90.7477%" y="255.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.11%)</title><rect x="90.4977%" y="229" width="0.1131%" height="15" fill="rgb(250,79,13)" fg:x="800" fg:w="1"/><text x="90.7477%" y="239.50"></text></g><g><title>_int_malloc (1 samples, 0.11%)</title><rect x="90.4977%" y="213" width="0.1131%" height="15" fill="rgb(211,146,34)" fg:x="800" fg:w="1"/><text x="90.7477%" y="223.50"></text></g><g><title>checked_request2size (1 samples, 0.11%)</title><rect x="90.4977%" y="197" width="0.1131%" height="15" fill="rgb(228,22,38)" fg:x="800" fg:w="1"/><text x="90.7477%" y="207.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Add&lt;ndarray::ArrayBase&lt;S2,E&gt;&gt; for &amp;ndarray::ArrayBase&lt;S,D&gt;&gt;::add (30 samples, 3.39%)</title><rect x="90.6109%" y="245" width="3.3937%" height="15" fill="rgb(235,168,5)" fg:x="801" fg:w="30"/><text x="90.8609%" y="255.50">nda..</text></g><g><title>&lt;haru_cmaes::strategy::Cmaes as haru_cmaes::strategy::CmaesOptimizer&gt;::tell (161 samples, 18.21%)</title><rect x="76.2443%" y="261" width="18.2127%" height="15" fill="rgb(221,155,16)" fg:x="674" fg:w="161"/><text x="76.4943%" y="271.50">&lt;haru_cmaes::strategy::Cmaes..</text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Sub&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for &amp;ndarray::ArrayBase&lt;S,D&gt;&gt;::sub (4 samples, 0.45%)</title><rect x="94.0045%" y="245" width="0.4525%" height="15" fill="rgb(215,215,53)" fg:x="831" fg:w="4"/><text x="94.2545%" y="255.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::build_uninit (3 samples, 0.34%)</title><rect x="94.1176%" y="229" width="0.3394%" height="15" fill="rgb(223,4,10)" fg:x="832" fg:w="3"/><text x="94.3676%" y="239.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2,PLast),D&gt;::collect_with_partial (1 samples, 0.11%)</title><rect x="94.3439%" y="213" width="0.1131%" height="15" fill="rgb(234,103,6)" fg:x="834" fg:w="1"/><text x="94.5939%" y="223.50"></text></g><g><title>_start (835 samples, 94.46%)</title><rect x="0.1131%" y="405" width="94.4570%" height="15" fill="rgb(227,97,0)" fg:x="1" fg:w="835"/><text x="0.3631%" y="415.50">_start</text></g><g><title>__libc_start_main_impl (835 samples, 94.46%)</title><rect x="0.1131%" y="389" width="94.4570%" height="15" fill="rgb(234,150,53)" fg:x="1" fg:w="835"/><text x="0.3631%" y="399.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (835 samples, 94.46%)</title><rect x="0.1131%" y="373" width="94.4570%" height="15" fill="rgb(228,201,54)" fg:x="1" fg:w="835"/><text x="0.3631%" y="383.50">__libc_start_call_main</text></g><g><title>main (835 samples, 94.46%)</title><rect x="0.1131%" y="357" width="94.4570%" height="15" fill="rgb(222,22,37)" fg:x="1" fg:w="835"/><text x="0.3631%" y="367.50">main</text></g><g><title>std::rt::lang_start_internal (835 samples, 94.46%)</title><rect x="0.1131%" y="341" width="94.4570%" height="15" fill="rgb(237,53,32)" fg:x="1" fg:w="835"/><text x="0.3631%" y="351.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::{{closure}} (835 samples, 94.46%)</title><rect x="0.1131%" y="325" width="94.4570%" height="15" fill="rgb(233,25,53)" fg:x="1" fg:w="835"/><text x="0.3631%" y="335.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (835 samples, 94.46%)</title><rect x="0.1131%" y="309" width="94.4570%" height="15" fill="rgb(210,40,34)" fg:x="1" fg:w="835"/><text x="0.3631%" y="319.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>flamegraph::main (835 samples, 94.46%)</title><rect x="0.1131%" y="293" width="94.4570%" height="15" fill="rgb(241,220,44)" fg:x="1" fg:w="835"/><text x="0.3631%" y="303.50">flamegraph::main</text></g><g><title>haru_cmaes::simple_use::example (835 samples, 94.46%)</title><rect x="0.1131%" y="277" width="94.4570%" height="15" fill="rgb(235,28,35)" fg:x="1" fg:w="835"/><text x="0.3631%" y="287.50">haru_cmaes::simple_use::example</text></g><g><title>__GI___libc_free (1 samples, 0.11%)</title><rect x="94.4570%" y="261" width="0.1131%" height="15" fill="rgb(210,56,17)" fg:x="835" fg:w="1"/><text x="94.7070%" y="271.50"></text></g><g><title>_int_free (1 samples, 0.11%)</title><rect x="94.4570%" y="245" width="0.1131%" height="15" fill="rgb(224,130,29)" fg:x="835" fg:w="1"/><text x="94.7070%" y="255.50"></text></g><g><title>all (884 samples, 100%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(235,212,8)" fg:x="0" fg:w="884"/><text x="0.2500%" y="447.50"></text></g><g><title>flamegraph (884 samples, 100.00%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(223,33,50)" fg:x="0" fg:w="884"/><text x="0.2500%" y="431.50">flamegraph</text></g><g><title>snrm2_k_HASWELL (48 samples, 5.43%)</title><rect x="94.5701%" y="405" width="5.4299%" height="15" fill="rgb(219,149,13)" fg:x="836" fg:w="48"/><text x="94.8201%" y="415.50">snrm2_k..</text></g></svg></svg>