<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="309.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="309.00"> </text><svg id="frames" x="10" width="1180" total_samples="603"><g><title>__sched_yield (14 samples, 2.32%)</title><rect x="0.0000%" y="245" width="2.3217%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="14"/><text x="0.2500%" y="255.50">_..</text></g><g><title>sgemm_itcopy_HASWELL (1 samples, 0.17%)</title><rect x="4.1459%" y="53" width="0.1658%" height="15" fill="rgb(217,0,24)" fg:x="25" fg:w="1"/><text x="4.3959%" y="63.50"></text></g><g><title>sgemm_kernel_HASWELL (14 samples, 2.32%)</title><rect x="4.3118%" y="53" width="2.3217%" height="15" fill="rgb(221,193,54)" fg:x="26" fg:w="14"/><text x="4.5618%" y="63.50">s..</text></g><g><title>sgemm_nn (16 samples, 2.65%)</title><rect x="4.1459%" y="69" width="2.6534%" height="15" fill="rgb(248,212,6)" fg:x="25" fg:w="16"/><text x="4.3959%" y="79.50">sg..</text></g><g><title>sgemm_oncopy_HASWELL (1 samples, 0.17%)</title><rect x="6.6335%" y="53" width="0.1658%" height="15" fill="rgb(208,68,35)" fg:x="40" fg:w="1"/><text x="6.8835%" y="63.50"></text></g><g><title>&lt;ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize (17 samples, 2.82%)</title><rect x="4.1459%" y="149" width="2.8192%" height="15" fill="rgb(232,128,0)" fg:x="25" fg:w="17"/><text x="4.3959%" y="159.50">&lt;n..</text></g><g><title> 2]&gt;&gt; as ndarray::linalg::impl_linalg::Dot&lt;ndarray::ArrayBase&lt;S2,ndarray::dimension::dim::Dim&lt;[usize (17 samples, 2.82%)</title><rect x="4.1459%" y="133" width="2.8192%" height="15" fill="rgb(207,160,47)" fg:x="25" fg:w="17"/><text x="4.3959%" y="143.50"> 2..</text></g><g><title> 2]&gt;&gt;&gt;&gt;::dot (17 samples, 2.82%)</title><rect x="4.1459%" y="117" width="2.8192%" height="15" fill="rgb(228,23,34)" fg:x="25" fg:w="17"/><text x="4.3959%" y="127.50"> 2..</text></g><g><title>ndarray::linalg::impl_linalg::mat_mul_impl (17 samples, 2.82%)</title><rect x="4.1459%" y="101" width="2.8192%" height="15" fill="rgb(218,30,26)" fg:x="25" fg:w="17"/><text x="4.3959%" y="111.50">nd..</text></g><g><title>cblas_sgemm (17 samples, 2.82%)</title><rect x="4.1459%" y="85" width="2.8192%" height="15" fill="rgb(220,122,19)" fg:x="25" fg:w="17"/><text x="4.3959%" y="95.50">cb..</text></g><g><title>sgemm_nt (1 samples, 0.17%)</title><rect x="6.7993%" y="69" width="0.1658%" height="15" fill="rgb(250,228,42)" fg:x="41" fg:w="1"/><text x="7.0493%" y="79.50"></text></g><g><title>sgemm_otcopy_HASWELL (1 samples, 0.17%)</title><rect x="6.7993%" y="53" width="0.1658%" height="15" fill="rgb(240,193,28)" fg:x="41" fg:w="1"/><text x="7.0493%" y="63.50"></text></g><g><title>free (3 samples, 0.50%)</title><rect x="6.9652%" y="149" width="0.4975%" height="15" fill="rgb(216,20,37)" fg:x="42" fg:w="3"/><text x="7.2152%" y="159.50"></text></g><g><title>free (1 samples, 0.17%)</title><rect x="7.6285%" y="133" width="0.1658%" height="15" fill="rgb(206,188,39)" fg:x="46" fg:w="1"/><text x="7.8785%" y="143.50"></text></g><g><title>haru_cmaes::fitness::square_and_sum::{{closure}} (4 samples, 0.66%)</title><rect x="7.4627%" y="149" width="0.6633%" height="15" fill="rgb(217,207,13)" fg:x="45" fg:w="4"/><text x="7.7127%" y="159.50"></text></g><g><title>ndarray::numeric::impl_numeric::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::sum (2 samples, 0.33%)</title><rect x="7.7944%" y="133" width="0.3317%" height="15" fill="rgb(231,73,38)" fg:x="47" fg:w="2"/><text x="8.0444%" y="143.50"></text></g><g><title>malloc (2 samples, 0.33%)</title><rect x="15.7546%" y="85" width="0.3317%" height="15" fill="rgb(225,20,46)" fg:x="95" fg:w="2"/><text x="16.0046%" y="95.50"></text></g><g><title>__pthread_mutex_lock (1 samples, 0.17%)</title><rect x="16.4179%" y="37" width="0.1658%" height="15" fill="rgb(210,31,41)" fg:x="99" fg:w="1"/><text x="16.6679%" y="47.50"></text></g><g><title>blas_memory_alloc (3 samples, 0.50%)</title><rect x="16.2521%" y="53" width="0.4975%" height="15" fill="rgb(221,200,47)" fg:x="98" fg:w="3"/><text x="16.5021%" y="63.50"></text></g><g><title>pthread_mutex_unlock (1 samples, 0.17%)</title><rect x="16.5837%" y="37" width="0.1658%" height="15" fill="rgb(226,26,5)" fg:x="100" fg:w="1"/><text x="16.8337%" y="47.50"></text></g><g><title>blas_memory_free (2 samples, 0.33%)</title><rect x="16.7496%" y="53" width="0.3317%" height="15" fill="rgb(249,33,26)" fg:x="101" fg:w="2"/><text x="16.9996%" y="63.50"></text></g><g><title>__pthread_mutex_lock (2 samples, 0.33%)</title><rect x="16.7496%" y="37" width="0.3317%" height="15" fill="rgb(235,183,28)" fg:x="101" fg:w="2"/><text x="16.9996%" y="47.50"></text></g><g><title>sgemm_beta_HASWELL (2 samples, 0.33%)</title><rect x="17.5788%" y="37" width="0.3317%" height="15" fill="rgb(221,5,38)" fg:x="106" fg:w="2"/><text x="17.8288%" y="47.50"></text></g><g><title>sgemm_itcopy_HASWELL (1 samples, 0.17%)</title><rect x="17.9104%" y="37" width="0.1658%" height="15" fill="rgb(247,18,42)" fg:x="108" fg:w="1"/><text x="18.1604%" y="47.50"></text></g><g><title>sgemm_kernel_HASWELL (17 samples, 2.82%)</title><rect x="18.0763%" y="37" width="2.8192%" height="15" fill="rgb(241,131,45)" fg:x="109" fg:w="17"/><text x="18.3263%" y="47.50">sg..</text></g><g><title>&lt;ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize (34 samples, 5.64%)</title><rect x="15.7546%" y="133" width="5.6385%" height="15" fill="rgb(249,31,29)" fg:x="95" fg:w="34"/><text x="16.0046%" y="143.50">&lt;ndarra..</text></g><g><title> 2]&gt;&gt; as ndarray::linalg::impl_linalg::Dot&lt;ndarray::ArrayBase&lt;S2,ndarray::dimension::dim::Dim&lt;[usize (34 samples, 5.64%)</title><rect x="15.7546%" y="117" width="5.6385%" height="15" fill="rgb(225,111,53)" fg:x="95" fg:w="34"/><text x="16.0046%" y="127.50"> 2]&gt;&gt; a..</text></g><g><title> 2]&gt;&gt;&gt;&gt;::dot (34 samples, 5.64%)</title><rect x="15.7546%" y="101" width="5.6385%" height="15" fill="rgb(238,160,17)" fg:x="95" fg:w="34"/><text x="16.0046%" y="111.50"> 2]&gt;&gt;&gt;&gt;..</text></g><g><title>ndarray::linalg::impl_linalg::mat_mul_impl (32 samples, 5.31%)</title><rect x="16.0862%" y="85" width="5.3068%" height="15" fill="rgb(214,148,48)" fg:x="97" fg:w="32"/><text x="16.3362%" y="95.50">ndarra..</text></g><g><title>cblas_sgemm (31 samples, 5.14%)</title><rect x="16.2521%" y="69" width="5.1410%" height="15" fill="rgb(232,36,49)" fg:x="98" fg:w="31"/><text x="16.5021%" y="79.50">cblas_..</text></g><g><title>sgemm_nn (26 samples, 4.31%)</title><rect x="17.0813%" y="53" width="4.3118%" height="15" fill="rgb(209,103,24)" fg:x="103" fg:w="26"/><text x="17.3313%" y="63.50">sgemm..</text></g><g><title>sgemm_oncopy_HASWELL (3 samples, 0.50%)</title><rect x="20.8955%" y="37" width="0.4975%" height="15" fill="rgb(229,88,8)" fg:x="126" fg:w="3"/><text x="21.1455%" y="47.50"></text></g><g><title>cblas_sgemv (2 samples, 0.33%)</title><rect x="21.3930%" y="133" width="0.3317%" height="15" fill="rgb(213,181,19)" fg:x="129" fg:w="2"/><text x="21.6430%" y="143.50"></text></g><g><title>sgemv_t_HASWELL (2 samples, 0.33%)</title><rect x="21.3930%" y="117" width="0.3317%" height="15" fill="rgb(254,191,54)" fg:x="129" fg:w="2"/><text x="21.6430%" y="127.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.17%)</title><rect x="21.7247%" y="133" width="0.1658%" height="15" fill="rgb(241,83,37)" fg:x="131" fg:w="1"/><text x="21.9747%" y="143.50"></text></g><g><title>free (3 samples, 0.50%)</title><rect x="21.8905%" y="133" width="0.4975%" height="15" fill="rgb(233,36,39)" fg:x="132" fg:w="3"/><text x="22.1405%" y="143.50"></text></g><g><title>malloc (1 samples, 0.17%)</title><rect x="22.3881%" y="133" width="0.1658%" height="15" fill="rgb(226,3,54)" fg:x="135" fg:w="1"/><text x="22.6381%" y="143.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::slice_move (1 samples, 0.17%)</title><rect x="22.5539%" y="133" width="0.1658%" height="15" fill="rgb(245,192,40)" fg:x="136" fg:w="1"/><text x="22.8039%" y="143.50"></text></g><g><title>ndarray::dimension::do_slice (1 samples, 0.17%)</title><rect x="22.5539%" y="117" width="0.1658%" height="15" fill="rgb(238,167,29)" fg:x="136" fg:w="1"/><text x="22.8039%" y="127.50"></text></g><g><title>haru_cmaes::strategy::Cmaes::tell (89 samples, 14.76%)</title><rect x="8.1260%" y="149" width="14.7595%" height="15" fill="rgb(232,182,51)" fg:x="49" fg:w="89"/><text x="8.3760%" y="159.50">haru_cmaes::strategy::C..</text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with (1 samples, 0.17%)</title><rect x="22.7197%" y="133" width="0.1658%" height="15" fill="rgb(231,60,39)" fg:x="137" fg:w="1"/><text x="22.9697%" y="143.50"></text></g><g><title>lax::eig::reconstruct_eigenvectors (1 samples, 0.17%)</title><rect x="22.8856%" y="149" width="0.1658%" height="15" fill="rgb(208,69,12)" fg:x="138" fg:w="1"/><text x="23.1356%" y="159.50"></text></g><g><title>malloc (2 samples, 0.33%)</title><rect x="23.0514%" y="149" width="0.3317%" height="15" fill="rgb(235,93,37)" fg:x="139" fg:w="2"/><text x="23.3014%" y="159.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize (1 samples, 0.17%)</title><rect x="23.3831%" y="149" width="0.1658%" height="15" fill="rgb(213,116,39)" fg:x="141" fg:w="1"/><text x="23.6331%" y="159.50"></text></g><g><title> 2]&gt;&gt;&gt;::from_diag (1 samples, 0.17%)</title><rect x="23.3831%" y="133" width="0.1658%" height="15" fill="rgb(222,207,29)" fg:x="141" fg:w="1"/><text x="23.6331%" y="143.50"></text></g><g><title>__libc_calloc (1 samples, 0.17%)</title><rect x="23.3831%" y="117" width="0.1658%" height="15" fill="rgb(206,96,30)" fg:x="141" fg:w="1"/><text x="23.6331%" y="127.50"></text></g><g><title>sgebal_ (3 samples, 0.50%)</title><rect x="23.7148%" y="133" width="0.4975%" height="15" fill="rgb(218,138,4)" fg:x="143" fg:w="3"/><text x="23.9648%" y="143.50"></text></g><g><title>isamax_ (1 samples, 0.17%)</title><rect x="24.0464%" y="117" width="0.1658%" height="15" fill="rgb(250,191,14)" fg:x="145" fg:w="1"/><text x="24.2964%" y="127.50"></text></g><g><title>sgemv_n_HASWELL (5 samples, 0.83%)</title><rect x="25.0415%" y="69" width="0.8292%" height="15" fill="rgb(239,60,40)" fg:x="151" fg:w="5"/><text x="25.2915%" y="79.50"></text></g><g><title>sgemv_ (11 samples, 1.82%)</title><rect x="24.3781%" y="85" width="1.8242%" height="15" fill="rgb(206,27,48)" fg:x="147" fg:w="11"/><text x="24.6281%" y="95.50">s..</text></g><g><title>sgemv_t_HASWELL (2 samples, 0.33%)</title><rect x="25.8706%" y="69" width="0.3317%" height="15" fill="rgb(225,35,8)" fg:x="156" fg:w="2"/><text x="26.1206%" y="79.50"></text></g><g><title>slarf_ (55 samples, 9.12%)</title><rect x="24.3781%" y="101" width="9.1211%" height="15" fill="rgb(250,213,24)" fg:x="147" fg:w="55"/><text x="24.6281%" y="111.50">slarf_</text></g><g><title>sger_ (44 samples, 7.30%)</title><rect x="26.2023%" y="85" width="7.2968%" height="15" fill="rgb(247,123,22)" fg:x="158" fg:w="44"/><text x="26.4523%" y="95.50">sger_</text></g><g><title>sger_k_HASWELL (42 samples, 6.97%)</title><rect x="26.5340%" y="69" width="6.9652%" height="15" fill="rgb(231,138,38)" fg:x="160" fg:w="42"/><text x="26.7840%" y="79.50">sger_k_HA..</text></g><g><title>saxpy_k_HASWELL (38 samples, 6.30%)</title><rect x="27.1973%" y="53" width="6.3018%" height="15" fill="rgb(231,145,46)" fg:x="164" fg:w="38"/><text x="27.4473%" y="63.50">saxpy_k_..</text></g><g><title>slapy2_ (2 samples, 0.33%)</title><rect x="33.4992%" y="85" width="0.3317%" height="15" fill="rgb(251,118,11)" fg:x="202" fg:w="2"/><text x="33.7492%" y="95.50"></text></g><g><title>slamch_ (1 samples, 0.17%)</title><rect x="33.6650%" y="69" width="0.1658%" height="15" fill="rgb(217,147,25)" fg:x="203" fg:w="1"/><text x="33.9150%" y="79.50"></text></g><g><title>snrm2_ (1 samples, 0.17%)</title><rect x="33.8308%" y="85" width="0.1658%" height="15" fill="rgb(247,81,37)" fg:x="204" fg:w="1"/><text x="34.0808%" y="95.50"></text></g><g><title>sgehrd_ (61 samples, 10.12%)</title><rect x="24.2123%" y="133" width="10.1161%" height="15" fill="rgb(209,12,38)" fg:x="146" fg:w="61"/><text x="24.4623%" y="143.50">sgehrd_</text></g><g><title>sgehd2_ (61 samples, 10.12%)</title><rect x="24.2123%" y="117" width="10.1161%" height="15" fill="rgb(227,1,9)" fg:x="146" fg:w="61"/><text x="24.4623%" y="127.50">sgehd2_</text></g><g><title>slarfg_ (5 samples, 0.83%)</title><rect x="33.4992%" y="101" width="0.8292%" height="15" fill="rgb(248,47,43)" fg:x="202" fg:w="5"/><text x="33.7492%" y="111.50"></text></g><g><title>sscal_ (2 samples, 0.33%)</title><rect x="33.9967%" y="85" width="0.3317%" height="15" fill="rgb(221,10,30)" fg:x="205" fg:w="2"/><text x="34.2467%" y="95.50"></text></g><g><title>sscal_k_HASWELL (1 samples, 0.17%)</title><rect x="34.1625%" y="69" width="0.1658%" height="15" fill="rgb(210,229,1)" fg:x="206" fg:w="1"/><text x="34.4125%" y="79.50"></text></g><g><title>scopy_ (2 samples, 0.33%)</title><rect x="69.1542%" y="101" width="0.3317%" height="15" fill="rgb(222,148,37)" fg:x="417" fg:w="2"/><text x="69.4042%" y="111.50"></text></g><g><title>slanv2_ (1 samples, 0.17%)</title><rect x="69.4859%" y="101" width="0.1658%" height="15" fill="rgb(234,67,33)" fg:x="419" fg:w="1"/><text x="69.7359%" y="111.50"></text></g><g><title>slapy2_ (1 samples, 0.17%)</title><rect x="69.4859%" y="85" width="0.1658%" height="15" fill="rgb(247,98,35)" fg:x="419" fg:w="1"/><text x="69.7359%" y="95.50"></text></g><g><title>slamch_ (5 samples, 0.83%)</title><rect x="70.8126%" y="85" width="0.8292%" height="15" fill="rgb(247,138,52)" fg:x="427" fg:w="5"/><text x="71.0626%" y="95.50"></text></g><g><title>lsame_ (1 samples, 0.17%)</title><rect x="71.4760%" y="69" width="0.1658%" height="15" fill="rgb(213,79,30)" fg:x="431" fg:w="1"/><text x="71.7260%" y="79.50"></text></g><g><title>slapy2_ (29 samples, 4.81%)</title><rect x="71.6418%" y="85" width="4.8093%" height="15" fill="rgb(246,177,23)" fg:x="432" fg:w="29"/><text x="71.8918%" y="95.50">slapy2_</text></g><g><title>slamch_ (16 samples, 2.65%)</title><rect x="73.7977%" y="69" width="2.6534%" height="15" fill="rgb(230,62,27)" fg:x="445" fg:w="16"/><text x="74.0477%" y="79.50">sl..</text></g><g><title>lsame_ (6 samples, 1.00%)</title><rect x="75.4561%" y="53" width="0.9950%" height="15" fill="rgb(216,154,8)" fg:x="455" fg:w="6"/><text x="75.7061%" y="63.50"></text></g><g><title>snrm2_ (2 samples, 0.33%)</title><rect x="76.4511%" y="85" width="0.3317%" height="15" fill="rgb(244,35,45)" fg:x="461" fg:w="2"/><text x="76.7011%" y="95.50"></text></g><g><title>slarfg_ (52 samples, 8.62%)</title><rect x="69.6517%" y="101" width="8.6235%" height="15" fill="rgb(251,115,12)" fg:x="420" fg:w="52"/><text x="69.9017%" y="111.50">slarfg_</text></g><g><title>sscal_ (9 samples, 1.49%)</title><rect x="76.7828%" y="85" width="1.4925%" height="15" fill="rgb(240,54,50)" fg:x="463" fg:w="9"/><text x="77.0328%" y="95.50"></text></g><g><title>sscal_k_HASWELL (4 samples, 0.66%)</title><rect x="77.6119%" y="69" width="0.6633%" height="15" fill="rgb(233,84,52)" fg:x="468" fg:w="4"/><text x="77.8619%" y="79.50"></text></g><g><title>slahqr_ (266 samples, 44.11%)</title><rect x="34.3284%" y="117" width="44.1128%" height="15" fill="rgb(207,117,47)" fg:x="207" fg:w="266"/><text x="34.5784%" y="127.50">slahqr_</text></g><g><title>srot_k_HASWELL (1 samples, 0.17%)</title><rect x="78.2753%" y="101" width="0.1658%" height="15" fill="rgb(249,43,39)" fg:x="472" fg:w="1"/><text x="78.5253%" y="111.50"></text></g><g><title>slaqr0_ (2 samples, 0.33%)</title><rect x="78.4411%" y="117" width="0.3317%" height="15" fill="rgb(209,38,44)" fg:x="473" fg:w="2"/><text x="78.6911%" y="127.50"></text></g><g><title>ilaenv_ (1 samples, 0.17%)</title><rect x="78.6070%" y="101" width="0.1658%" height="15" fill="rgb(236,212,23)" fg:x="474" fg:w="1"/><text x="78.8570%" y="111.50"></text></g><g><title>slaset_ (1 samples, 0.17%)</title><rect x="78.7728%" y="117" width="0.1658%" height="15" fill="rgb(242,79,21)" fg:x="475" fg:w="1"/><text x="79.0228%" y="127.50"></text></g><g><title>shseqr_ (270 samples, 44.78%)</title><rect x="34.3284%" y="133" width="44.7761%" height="15" fill="rgb(211,96,35)" fg:x="207" fg:w="270"/><text x="34.5784%" y="143.50">shseqr_</text></g><g><title>sroundup_lwork_ (1 samples, 0.17%)</title><rect x="78.9386%" y="117" width="0.1658%" height="15" fill="rgb(253,215,40)" fg:x="476" fg:w="1"/><text x="79.1886%" y="127.50"></text></g><g><title>slacpy_ (2 samples, 0.33%)</title><rect x="79.1045%" y="133" width="0.3317%" height="15" fill="rgb(211,81,21)" fg:x="477" fg:w="2"/><text x="79.3545%" y="143.50"></text></g><g><title>slaic1_ (2 samples, 0.33%)</title><rect x="80.2653%" y="117" width="0.3317%" height="15" fill="rgb(208,190,38)" fg:x="484" fg:w="2"/><text x="80.5153%" y="127.50"></text></g><g><title>slange_ (8 samples, 1.33%)</title><rect x="79.4362%" y="133" width="1.3267%" height="15" fill="rgb(235,213,38)" fg:x="479" fg:w="8"/><text x="79.6862%" y="143.50"></text></g><g><title>slaisnan_ (1 samples, 0.17%)</title><rect x="80.5970%" y="117" width="0.1658%" height="15" fill="rgb(237,122,38)" fg:x="486" fg:w="1"/><text x="80.8470%" y="127.50"></text></g><g><title>sgemv_ (5 samples, 0.83%)</title><rect x="81.2604%" y="69" width="0.8292%" height="15" fill="rgb(244,218,35)" fg:x="490" fg:w="5"/><text x="81.5104%" y="79.50"></text></g><g><title>sgemv_t_HASWELL (5 samples, 0.83%)</title><rect x="81.2604%" y="53" width="0.8292%" height="15" fill="rgb(240,68,47)" fg:x="490" fg:w="5"/><text x="81.5104%" y="63.50"></text></g><g><title>sorghr_ (29 samples, 4.81%)</title><rect x="80.7629%" y="133" width="4.8093%" height="15" fill="rgb(210,16,53)" fg:x="487" fg:w="29"/><text x="81.0129%" y="143.50">sorghr_</text></g><g><title>sorgqr_ (28 samples, 4.64%)</title><rect x="80.9287%" y="117" width="4.6434%" height="15" fill="rgb(235,124,12)" fg:x="488" fg:w="28"/><text x="81.1787%" y="127.50">sorgq..</text></g><g><title>sorg2r_ (28 samples, 4.64%)</title><rect x="80.9287%" y="101" width="4.6434%" height="15" fill="rgb(224,169,11)" fg:x="488" fg:w="28"/><text x="81.1787%" y="111.50">sorg2..</text></g><g><title>slarf_ (27 samples, 4.48%)</title><rect x="81.0945%" y="85" width="4.4776%" height="15" fill="rgb(250,166,2)" fg:x="489" fg:w="27"/><text x="81.3445%" y="95.50">slarf_</text></g><g><title>sger_ (21 samples, 3.48%)</title><rect x="82.0896%" y="69" width="3.4826%" height="15" fill="rgb(242,216,29)" fg:x="495" fg:w="21"/><text x="82.3396%" y="79.50">sge..</text></g><g><title>sger_k_HASWELL (19 samples, 3.15%)</title><rect x="82.4212%" y="53" width="3.1509%" height="15" fill="rgb(230,116,27)" fg:x="497" fg:w="19"/><text x="82.6712%" y="63.50">sge..</text></g><g><title>saxpy_k_HASWELL (15 samples, 2.49%)</title><rect x="83.0846%" y="37" width="2.4876%" height="15" fill="rgb(228,99,48)" fg:x="501" fg:w="15"/><text x="83.3346%" y="47.50">sa..</text></g><g><title>sdot_ (1 samples, 0.17%)</title><rect x="88.5572%" y="117" width="0.1658%" height="15" fill="rgb(253,11,6)" fg:x="534" fg:w="1"/><text x="88.8072%" y="127.50"></text></g><g><title>sdot_k_HASWELL (15 samples, 2.49%)</title><rect x="88.7231%" y="117" width="2.4876%" height="15" fill="rgb(247,143,39)" fg:x="535" fg:w="15"/><text x="88.9731%" y="127.50">sd..</text></g><g><title>sgemm_ (7 samples, 1.16%)</title><rect x="91.2106%" y="117" width="1.1609%" height="15" fill="rgb(236,97,10)" fg:x="550" fg:w="7"/><text x="91.4606%" y="127.50"></text></g><g><title>sgemm_nn (7 samples, 1.16%)</title><rect x="91.2106%" y="101" width="1.1609%" height="15" fill="rgb(233,208,19)" fg:x="550" fg:w="7"/><text x="91.4606%" y="111.50"></text></g><g><title>sgemm_kernel_HASWELL (5 samples, 0.83%)</title><rect x="91.5423%" y="85" width="0.8292%" height="15" fill="rgb(216,164,2)" fg:x="552" fg:w="5"/><text x="91.7923%" y="95.50"></text></g><g><title>slaln2_ (12 samples, 1.99%)</title><rect x="92.3715%" y="117" width="1.9900%" height="15" fill="rgb(220,129,5)" fg:x="557" fg:w="12"/><text x="92.6215%" y="127.50">s..</text></g><g><title>slamch_ (3 samples, 0.50%)</title><rect x="93.8640%" y="101" width="0.4975%" height="15" fill="rgb(242,17,10)" fg:x="566" fg:w="3"/><text x="94.1140%" y="111.50"></text></g><g><title>lsame_ (1 samples, 0.17%)</title><rect x="94.1957%" y="85" width="0.1658%" height="15" fill="rgb(242,107,0)" fg:x="568" fg:w="1"/><text x="94.4457%" y="95.50"></text></g><g><title>slaset_ (2 samples, 0.33%)</title><rect x="94.3615%" y="117" width="0.3317%" height="15" fill="rgb(251,28,31)" fg:x="569" fg:w="2"/><text x="94.6115%" y="127.50"></text></g><g><title>_start (558 samples, 92.54%)</title><rect x="2.3217%" y="245" width="92.5373%" height="15" fill="rgb(233,223,10)" fg:x="14" fg:w="558"/><text x="2.5717%" y="255.50">_start</text></g><g><title>__libc_start_main (558 samples, 92.54%)</title><rect x="2.3217%" y="229" width="92.5373%" height="15" fill="rgb(215,21,27)" fg:x="14" fg:w="558"/><text x="2.5717%" y="239.50">__libc_start_main</text></g><g><title>main (558 samples, 92.54%)</title><rect x="2.3217%" y="213" width="92.5373%" height="15" fill="rgb(232,23,21)" fg:x="14" fg:w="558"/><text x="2.5717%" y="223.50">main</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (558 samples, 92.54%)</title><rect x="2.3217%" y="197" width="92.5373%" height="15" fill="rgb(244,5,23)" fg:x="14" fg:w="558"/><text x="2.5717%" y="207.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>profile::main (558 samples, 92.54%)</title><rect x="2.3217%" y="181" width="92.5373%" height="15" fill="rgb(226,81,46)" fg:x="14" fg:w="558"/><text x="2.5717%" y="191.50">profile::main</text></g><g><title>haru_cmaes::simple_use::example (558 samples, 92.54%)</title><rect x="2.3217%" y="165" width="92.5373%" height="15" fill="rgb(247,70,30)" fg:x="14" fg:w="558"/><text x="2.5717%" y="175.50">haru_cmaes::simple_use::example</text></g><g><title>sgeev_ (430 samples, 71.31%)</title><rect x="23.5489%" y="149" width="71.3101%" height="15" fill="rgb(212,68,19)" fg:x="142" fg:w="430"/><text x="23.7989%" y="159.50">sgeev_</text></g><g><title>strevc3_ (56 samples, 9.29%)</title><rect x="85.5721%" y="133" width="9.2869%" height="15" fill="rgb(240,187,13)" fg:x="516" fg:w="56"/><text x="85.8221%" y="143.50">strevc3_</text></g><g><title>sscal_ (1 samples, 0.17%)</title><rect x="94.6932%" y="117" width="0.1658%" height="15" fill="rgb(223,113,26)" fg:x="571" fg:w="1"/><text x="94.9432%" y="127.50"></text></g><g><title>all (603 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(206,192,2)" fg:x="0" fg:w="603"/><text x="0.2500%" y="287.50"></text></g><g><title>profile (603 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(241,108,4)" fg:x="0" fg:w="603"/><text x="0.2500%" y="271.50">profile</text></g><g><title>snrm2_k_HASWELL (31 samples, 5.14%)</title><rect x="94.8590%" y="245" width="5.1410%" height="15" fill="rgb(247,173,49)" fg:x="572" fg:w="31"/><text x="95.1090%" y="255.50">snrm2_..</text></g></svg></svg>